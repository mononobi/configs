# this section is to block access for malicious or bot user agents.
include /etc/nginx/conf.d/blocked-user-agents.rules;

# this section is to limit the access to those requests
# that have the required api key in their header.
# the sample header name is 'x-api-key'.
map $http_x_api_key $api_key {
  default 0;
  you_actual_api_key_value 1;
}

# these backends will be selected to serve requests based on their current load.
# 'least_conn' means that select the server which has fewer connections.
upstream geo_backend {
  least_conn;
  server 127.0.0.1:8080;
  server 127.0.0.1:8081;
  server 127.0.0.1:8082;
}

upstream nav_backend {
  least_conn;
  server 127.0.0.1:7070;
  server 127.0.0.1:7071;
}

server {

  # requests from blocked user agents will fail here.
  if ($blockedagent) {
      return 444;
  }

  if ($host !~ ^(domain.com)$ ) {
      return 444;
  }

  # requests which do not have the api key in their header will fail here.
  if ($api_key != 1) {
      return 444;
  }

  server_name              domain.com www.domain.com;
  server_tokens            off;

  listen                   [::]:443 ssl ipv6only=on; # managed by Certbot
  listen                   443 ssl; # managed by Certbot
  ssl_certificate          /etc/letsencrypt/live/www.domain.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key      /etc/letsencrypt/live/www.domain.com/privkey.pem; # managed by Certbot
  include                  /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam              /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  charset                  utf-8;

  client_body_timeout           60;
  client_header_timeout         60;
  client_header_buffer_size     32k;
  large_client_header_buffers   2 32k;

  proxy_http_version            1.1;
  proxy_cache_bypass            $http_upgrade;
  proxy_connect_timeout         30;
  proxy_send_timeout            60;
  proxy_read_timeout            60;

  proxy_set_header    Upgrade              $http_upgrade;
  proxy_set_header    Connection           "upgrade";
  proxy_set_header    Host                 $host;
  proxy_set_header    X-Real-IP            $remote_addr;
  proxy_set_header    X-Forwarded-For      $proxy_add_x_forwarded_for;
  proxy_set_header    X-Forwarded-Proto    $scheme;
  proxy_set_header    X-Forwarded-Host     $host;
  proxy_set_header    X-Forwarded-Port     $server_port;

  proxy_pass_request_body      on;
  proxy_pass_request_headers   on;

  client_max_body_size          32k;
  client_body_buffer_size       128k;
  proxy_buffer_size             4k;
  proxy_buffers                 4 4k;
  proxy_busy_buffers_size       4k;

  access_log               /var/log/nginx/access.domain.log;
  error_log                /var/log/nginx/error.domain.log;

  # this section adds support for cors.
  if ($request_method = OPTIONS) {
    return 204;
  }

  add_header Access-Control-Allow-Origin *;
  add_header Access-Control-Max-Age 3600;
  add_header Access-Control-Expose-Headers Content-Length;
  add_header Access-Control-Allow-Headers Range;

  location /geo/ {
    rewrite ^/geo(.*) $1 break;
    proxy_pass geo_backend;
  }

  location /nav/ {
    rewrite ^/nav(.*) $1 break;
    proxy_pass nav_backend;
  }

  location / {
    return 200 'Welcome to our website!';
    add_header Content-Type text/plain;
  }
}

server {

  if ($blockedagent) {
      return 444;
  }

  # here we just send a redirect response to clients to send request to 'https' url.
  if ($host = domain.com) {
      return 301 https://$host$request_uri;
  } # managed by Certbot


  listen          80 default_server;
  listen          [::]:80 default_server;
  server_name     domain.com www.domain.com;

  return 444; # managed by Certbot
}
