# following this guide, will prevent your system from any kind of dns leaks when using a vpn.

# dnsmasq is a lightweight dns caching server which speeds up page loading.
# it is way more convenient and stable than 'systemd-resolved' which is default on ubuntu.
# and also it does not create dns leaks when accepts dns queries on local address.

# if you have 'resolvconf' installed, remove it:

sudo apt remove resolvconf

# you should disable 'systemd-resolved' service to prevent dns leaks.
# 'systemd-resolved' has an issue which bypasses iptables defined in system and sends
# dns queries out directly on default gateway and none of them can reach to vpn interface
# (ex. nekoray-tun), this will cause lots of dns leaks.

# disable 'systemd-resolved' if it is installed:

sudo systemctl stop systemd-resolved
sudo systemctl disable systemd-resolved

# now reboot the system for changes to take effect:

sudo reboot

# each time 'systemd-resolved' gets updated, it may get enabled again.
# so you should disable it afterwards.
# the 'pc-update' command handles this if you use it.

# after disabling 'systemd-resolved' and not replacing it with any other service, the
# '127.0.0.53' ip would not listen on port 53 anymore. but disabling 'systemd-resolved'
# will not cause any apps to fail, because no app directly uses it. in most cases there is
# a config file for an app or a platform (ex. flatpak) which tries all available dns resolvers
# and if 'systemd-resolved' fails, another resolver would be used (ex. /etc/resolv.conf).

# but we will run 'dnsmasq' on the same ip and port for total compatibility even for
# apps which may have wrongfully used 'systemd-resolved' listen address directly.

# after disabling 'systemd-resolved' you should also check '/etc/nsswitch.conf' file:

sudo nano /etc/nsswitch.conf

# if the 'files' line has 'resolve' in it, you should remove 'resolve' from it.

# for example:

# files mdns4_minimal [NOTFOUND=return] resolve [!UNAVAIL=return] dns mymachines

# you should remove 'resolve' and '[!UNAVAIL=return]' and the line should become like this:

# files mdns4_minimal [NOTFOUND=return] dns mymachines

# note that by disabling 'systemd-resolved', the dns servers which are set in
# network manager gui, will never be used.

# remove the old 'resolv.conf' file:

sudo rm /etc/resolv.conf

# create a new file:

sudo touch /etc/resolv.conf

# open the newly created file:

sudo nano /etc/resolv.conf

# add new dns servers. note that the first nameserver should always point
# to where you want to run dnsmasq:

# nameserver 127.0.0.53
# nameserver IPv4-1
# nameserver IPv4-2
# nameserver IPv6-1
# nameserver IPv6-2

# note that there is no limit for nameservers with dnsmasq, and you can add as many as
# you want. dnsmasq will use servers based on their order.

# install dnsmasq:

sudo apt-get install dnsmasq

# open the configuration file:

sudo nano /etc/dnsmasq.conf

# add these values into the file and save it:

listen-address=127.0.0.53
port=53
cache-size=5000
max-cache-ttl=3600
min-cache-ttl=3600
dns-forward-max=50
no-ping
strict-order
dns-loop-detect

# you can change these values if you prefer something else but consider these notes:

# the max value for 'max-cache-ttl' and 'min-cache-ttl' is 3600 seconds.
# default cache timeout depends on the dns provider but in most cases it is
# between 1 and 5 minutes. if you live in a hostile country (Iran, China and ...)
# with aggressive dns spoofing and bandwidth throttling, increasing the dns cache timeout
# will help you surf the web more conveniently.

# the max value for 'cache-size' is 10000 records.

# 'dns-forward-max' indicates the limit for the maximum concurrent dns queries which can
# be sent out. its default value is 150, but it's better to set a lower value for it to
# prevent dsn request flooding.

# 'strict-order' will tell dnsmasq to use available nameservers in the order of
# their appearance in 'resolv.conf' file.

# 'dns-loop-detect' is telling dnsmasq not to use those nameservers which are directly or
# indirectly using the address where dnsmasq itself is up.
# note that this option should always be available. otherwise when a request comes to
# dnsmasq it might select its own address from the available nameservers and that would
# create a loop which could also be infinite if 'strict-order' is also set.

# execute this to enable and start dnsmasq:

sudo systemctl enable dnsmasq
sudo systemctl start dnsmasq

# you can execute this to see the status of dnsmasq service:

sudo systemctl status dnsmasq

######################## IMPORTANT NOTE ########################

# after you connect to a vpn, you should always restart the dnsmasq service with
# this command to invalidate all cached dns responses. because when you were not
# connected to vpn, many dns responses may well be spoofed by the mullahs and
# then cached. so some websites may not open despite you've connected to vpn.
# the 'dns-reset' command handles this if you use it.
# you can also reset it manually:

sudo systemctl restart dnsmasq

# you can also copy this file into 'if-up.d' folder to automatically clear dns
# cache whenever a vpn connects through 'tun0' or 'nekoray-tun' tunnels:

sudo cp files/dns-cache /etc/network/if-up.d
sudo chmod 755 /etc/network/if-up.d/dns-cache

######################## TEST WHETHER DNS CACHE IS WORKING ########################

# execute each of these commands multiple times. for each command, the first call may go
# to dns provider, so it may have a latency greater than zero (depending on your
# internet speed), but the consecutive calls should all have zero or near zero latency
# because they would come from the cache:

dig google.com
dig facebook.com
dig yahoo.com
dig github.com

################# TEST WHETHER DNS CACHE GETS RESET AFTER VPN CONNECTION #################

# this test is only valid if you have copied 'dns-cache' file into 'if-up.d' directory.
# execute this command without vpn connection to persist response in cache. then connect
# to vpn and execute it again. it should get the result from the dns provider because
# the cache should be reset after vpn connection. you can tell whether it has got the result
# from dns provider if the latency is not zero.

dig amazon.com

######################## TEST WHETHER THERE IS ANY DNS LEAKS ########################

# connect to your vpn or proxy.

# restart dnsmasq to invalidate cached values:

sudo systemctl restart dnsmasq

# open a wireshark capture window on the connected interface (wired or wireless).
# apply this filter in filter box and hit enter:
# udp.port == 53

# now execute these commands one by one and see if any dns queries related to these
# commands goes through the default gateway or not (excluding those 'ICMP' requests
# which are unreachable).
# if you are connected to a vpn or proxy, no dns queries should go out through default
# gateway and all of them must go through vpn tunnel or interface.

curl github.com
dig yahoo.com
ping youtube.com

# if you have flatpak installed, also test this command, because flatpak also
# tries 'systemd-resolved' for dns queries which leads to dns leak:

flatpak run --share=network --devel --command=python3 org.freedesktop.Platform/x86_64/21.08 -c 'import socket; print(socket.gethostbyname_ex("google.com"))'

# if any of the above commands were sending dns queries through wired or wireless interface
# and not through the vpn or proxy interface, it means that you have to go through all the
# changes which had been mentioned above to find the issue.

############################ STATISTICS OF DNS CACHE ############################

# to see different statistics of dnsmasq cache, execute each one of these commands:

dig +short chaos txt cachesize.bind
dig +short chaos txt insertions.bind
dig +short chaos txt hits.bind
dig +short chaos txt misses.bind
dig +short chaos txt evictions.bind
dig +short chaos txt auth.bind
dig +short chaos txt servers.bind

# note that these commands would also increase cache hits count.

# the 'servers.bind' command returns all local and remote dns servers and reports two
# numbers for each remote server. the first number is the number of successful queries
# and the second one is the number of failed queries to that server, in this form:

# SERVER_IP SUCCESS_COUNT FAILED_COUNT

# for example:

# "127.0.0.53#53 0 0" "8.8.8.8#53 10 1" "8.8.4.4#53 2 0"

# as caching is enabled, whenever a cache miss occurs, the request would go to remote
# servers. so as a formula we almost have this:

cache misses = sum(success count of each remote server)

# so in the above example the cache miss count is 12 (10 + 2).

# you can copy this file into 'sbin' to be able to see cache stats with a single command:

cp files/dns-stats ~/.local/sbin
