# gpg keys can be used to add signature to different files or actions, for example git commits.

# install these dependencies first:

sudo apt install gpg
sudo apt install pass

# check the gpg version:

gpg --version

# create a gpg public, private key pair:

gpg --full-gen-key

# select the algorithm as "RSA and RSA".
# select the key length as "4096".
# select the key validity as "0 = key does not expire".

# after confirmation, fill out the required info:
# "Real name" would be the name you will use to reference the key (as "KEY_USER_NAME").
# "Email address" would be the email you will use to reference the key (as "KEY_EMAIL").

# after filling out the info and confirming, set a strong password for the key.

# execute this to see the newly created key info:

gpg --list-secret-keys --keyid-format LONG KEY_EMAIL

# the key info would be something like this:

######################## GPG KEY INFO #############################

sec   rsa4096/KEY_ID 2017-08-18 [SC]
  D5E4F29F3275DC0CDA8FFC8730F2B65B9246B6CA
uid                   [ultimate] KEY_USER_NAME <KEY_EMAIL>
ssb   rsa4096/B7ABC0813E4028C0 2017-08-18 [E]

######################## GPG KEY INFO #############################

# copy the "KEY_ID" from the first line starting with "sec"
# which would be something like this:

30F2B65B9246B6CA

# execute this to export the public key:

gpg --armor --export KEY_ID

# copy the public key content and save it into a file (ex. gpg.pub).

# now you can use the public key in different places for example
# as a GitHub or GitLab GPG key.

# show the list of available gpg keys:

gpg --list-keys

# show the list of available gpg secret keys:

gpg --list-secret-keys

# to delete an already available key, execute these commands in order:

gpg --delete-secret-key "KEY_USER_NAME"
gpg --delete-key "KEY_USER_NAME"

# note that the KEY_USER_NAME would be the "Real name" which
# you've provided when creating a key.

# you can find the keys information on this location:
# ~/.gnupg

################# NOTE FOR USING A KEY WITH MULTIPLE EMAILS #################

if you want to have a single key to be able to set it globally on your system
for example for git commits on your personal GitHub account and also for your
work account. you can add multiple emails to a single key (your personal email
on GitHub and the one you use for your work). this way all your commits would
be correctly flagged as Verified on multiple git repositories (personal and
work).

to achieve this, do the following:

gpg --edit-key KEY_ID
adduid

# after confirmation, fill out the required info for the new email.

# execute these:

uid SECOND_KEY_EMAIL
trust

# choose the 'ultimate' trust from the list and confirm.

# execute these:

save
gpg --send-keys KEY_ID
